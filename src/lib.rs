use tiny_keccak::Keccak;

pub fn namehash(name: &str) -> Vec<u8> {
    let mut node = vec![0u8; 32];
    if name.is_empty() {
        return node;
    }
    let mut labels: Vec<&str> = name.split(".").collect();
    labels.reverse();
    for label in labels.iter() {
        let mut labelhash = [0u8; 32];
        Keccak::keccak256(label.as_bytes(), &mut labelhash);
        node.append(&mut labelhash.to_vec());
        labelhash = [0u8; 32];
        Keccak::keccak256(node.as_slice(), &mut labelhash);
        node = labelhash.to_vec();
    }
    node
}

#[cfg(test)]
mod test {
    use super::namehash;
    
    #[test]
    fn test_namehash() {
        // Test cases, same than used @ EIP137 `https://github.com/ethereum/EIPs/blob/master/EIPS/eip-137.md`
        let cases = vec![ 
            ("", &[
                0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00]), 
            ("eth", &[
                0x93, 0xcd, 0xeb, 0x70, 0x8b, 0x75, 0x45, 0xdc,
                0x66, 0x8e, 0xb9, 0x28, 0x1, 0x76, 0x16, 0x9d, 
                0x1c, 0x33, 0xcf, 0xd8, 0xed, 0x6f, 0x4, 0x69, 
                0xa, 0xb, 0xcc, 0x88, 0xa9, 0x3f, 0xc4, 0xae]),
             ("foo.eth", &[
                0xde, 0x9b, 0x9, 0xfd, 0x7c, 0x5f, 0x90, 0x1e,
                0x23, 0xa3, 0xf1, 0x9f, 0xec, 0xc5, 0x48, 0x28,
                0xe9, 0xc8, 0x48, 0x53, 0x98, 0x1, 0xe8, 0x65,
                0x91, 0xbd, 0x98, 0x1, 0xb0, 0x19, 0xf8, 0x4f])
        ];

        for (name, expected_namehash) in cases {
            let namehash: &[u8] =&namehash(name);
            assert_eq!(namehash, expected_namehash);
        }
    }
}

